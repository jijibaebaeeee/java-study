복습 -> 입력메소드 -> 연산자 -> 제어문(조건문)

0. 복습
1) JAVA의 개발 배경
	sun 마이크로 시스템사의 제임스 고슬링 팀에 개발
	객체 지향 언어
	C언어와 C++언어를 토대로 개발됨

2) JAVA 언어의 특징
	다양한 운영체제 의해 이식성이 높다
	자료 중심의 객체지향언어(중요한 자료를 클래스로 형성해서 만듦)

3) 프로그램 개발 순서
	일반프로그램 : 소스파일 -- 컴파일 --> 실행파일(.exe) -- 실행 --> 컴퓨터
	자바프로그램 : 소스파일 -- 컴파일 --> 실행파일(바이트코드).class -- 실행 --> 컴퓨터

	소스파일에서 컴파일된 바이트 코드를 다시 기계어 코드로 변환하는 작업이 필요함
	이 작업을 JVM이 한다!!
	
4) JVM, JRE, JDK
	JVM : JAVA로 만든 프로그램을 실행시켜준다. 메모리 관리(Stack, Heap, Method + 2개 영역으로 나뉨)
	JRE : JVM을 포함한다. JVM을 실행할 때 필요한 라이브러리 파일 등을 가지고 있다
	JDK : JRE를 포함한다. JRE 외에 개발에 필요한 도구들을 가지고 있다(컴파일러 등)
	
5) 변수(Variable)
	값을 저장하는 저장 공간
	반복되는 값을 관리하기위해(재사용)
	값에 의미를 부여하기 위해(값에 이름을 붙여준다)
	프로그램 가독성, 유지보수성을 높이기 위해
	
	1)
	자료형 변수명;
	변수명 = 값;
	
	2)
	자료형 변수명 = 값;		int number = 10; //정수형 4byte number 변수에 10이라는 값을 대입

6) 자료형(DataType)
	정수형	int	4byte
		long	8byte
	실수형	double	8byte <- 기본형인 이유 : 정밀도 .15자리까지
		float	4byte .6자리까지
	논리형	boolean	1byte
	문자형	char	2byte	''
	문자열	string	?	""

7) 형변환(Type Casting)
	강제형변환 : (자료형) 값
	자동형변환 : 작은 값은 큰 저장공간에 저장할 때
		   정수 + 정수 = 정수
		   정수 + 실수 = 실수
		   char에서 int로 형변환 ex) int num = 'a'  //값 95
	다른 자료형을 문자열로 변환 : + ""(빈문자열) ex) 5 + "입니다"   -> "5입니다"
	문자열을 다른 자료형으로 변환 : 클래스타입을 이용 ex) "10" =>Integer.parseInt("10")
						    "abc" => "abc".charAt(1)

8) 이스케이프 문자 (?)
	문자열 안에서 작성한다
	\n
	\t
	\"
	\'
	\\

9) 출력메소드
	print()		=> 소괄호 안에 있는 값을 콘솔창에 출력하고 줄바꿈은 하지 않는다
	println()	=> 소괄호 안에 있는 값을 콘솔창에 출력하고 줄바꿈을 한다
	printf()	=> 서식문자의 형식에 맞게 값을 콘솔창에 출력하고 줄바꿈은 하지 않는다. (?)

	
	자료형	형식지정자
	int	%d	10진수 정수
		%o	8진수 정수
		%x	16진수 정수
	double 	%f	실수(소수점이하 6자리까지 출력)	%.2f (소수점이하 2자리까지)
	char 	%c	문자
	String	%s	문자열
	논리형	%s	논리형

10) 주소값
	메모리(RAM)에 저장공간이 할당되면 고유한 값이 주소값이 부여된다
	값은 변경될 수 있으나 중복은 없다

	- RAM (Random Access Memory) :저장공간이 랜덤으로 지정된다.

---------------------------------------------------------------------------------------------------------
1. 입력메소드
  1) 함수
	기능
	이름 뒤에 ()가 온다
  
  2) 메소드
	함수와 같이 기능을 의미한다
	java에서 모든 함수는 클래스 내부에서 만들어지기 때문에 메소드라고 말한다
	
	어떤 메소드를 사용하기 위해서는 그 메소드가 어떤 클래스에 존재하는지 알아야한다
	System.out.println() // System 이라는 클래스 안에 존재한다.
	
  3) Scanner 클래스 (입력 클래스)
	입력 메소드를 이용하기 위해서는 반드시 입력 클래스를 불러와야한다(아래 1줄이 필요하다)
	입력 클래스가 위치한 패키지가 다르기 때문에 패키지를 불러와야한다(import java.util.Scanner)
	Scanner sc      =     new Scanner(System.in);
	자료형  변수명 대입 연산자       값

  4) 입력 메소드
	Scanner 클래스 내부에 입력 메소드가 만들어져 있다
	next() : 입력 받은 값을 String타입으로 돌려준다(입력받은 값을 변수에 저장시에는 String 변수를 만들어야한다)
		 입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다
		 임시 저장공간에서 엔터를 소모하지 않는다
		 - 첫번째 문자열을 첫번째 next()에 담고, 두번째 문자열은 두번째 next()에 담는다
		
		배 지수
		String name1 = sc.next();
		String name2 = sc.next();
		syso(name1);  //배
		syso(name2);  //지수

		띄어쓰기는 아직 버퍼에 남아있다

	nextline() : 입력받은 값을 String타입으로 돌려준다
		     띄어쓰기를 포함한 한 줄 전체를 입력받는다
		     엔터 이전까지의 값을 가져온다
		     엔터를 임시저장공간에서 지워준다(소모한다)	

	nextInt() : 입력받은 값을 int타입으로 돌려준다.
		    입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다
	nextDouble() : 입력받은 값을 double타입으로 돌려준다
		       입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다

	=> next(), nextInt(), nextDouble()을 사용하면 엔터값이 남아 있게 되는데
	   다음에 nextLine()을 사용하게 되면 남아있던 엔터를 소모하여 입력을 받지 않게 된다
	   따라서 입력받기 전에 nextLine()을 사용하여 엔터를 소모시켜야한다

  +) 각 자료형의 기본값(초기화 시킬 때 주로 사용)
	int : 0
	double : 0.0
	boolean : false
	char : ' '
	string : "", null
	




























