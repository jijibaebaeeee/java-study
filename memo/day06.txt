day06
복습 -> 반복문(do~while문) -> 이중 for문 -> 배열

0. 복습
1) 연산자
	최 단 산 쉬 관 리 삼 대

- 삼항연산자(?:)
	조건식 ? 참일 때의 값 : 거짓일 때의 값

- 비트연산자
	bit : 정보량의 최소단위(0, 1)
	byte : 8bit = 1byte
	
	10진수 -> 2진수
	10 -> 1010

- 논리연산자
	일반적인 논리연산자 && || !
	비트 논리연산자 & 	두 비트가 모두 1이면 1
		    |	두 비트 중 하나라도 1이면 1
		    ^   두 비트가 서로 다르면 1
		    ~   비트가 0이면 1, 1이면 0 ~n = -(n + 1)

- 쉬프트연산자
	좌 쉬프트 A << B : A의 비트를 왼쪽으로 B만큼 이동시킨다
			 오른쪽에 생기는 빈칸은 0으로 채워진다
			 지정된 비트수를 넘어가면 잘린다
	우 쉬프트 A >> B : A의 비트를 오른쪽으로 B만큼 이동시킨다
			 왼쪽에 생기는 빈칸은 부호비트에 따라 달라진다(양수 0으로 채움, 음수 1로 채움)
			 이동 중 잘린 비트는 삭제 된다.

2) 제어문 : 프로그램의 흐름을 제어한다
	조건문	조건식의 결과(true, false)에 따라 실행흐름을 결정한다
		if문, switch문
	반복문 	특정 조건을 만족할 때까지 실행코드를 반복 실행한다
		for문, while문, do~while문
	기타 제어문 	흐름을 건너뛰거나 즉시 종료한다
		break문, continue문
--------------------------------------------------------------------------
1. 반복문
  1) do~while문
	while문과 동일하지만 최소 한번은 무조건 실행해야 할 때 사용한다

	do {
		실행할문장;
	}while(조건식);

 2) 이중 for문
	하나의 반복문 안에 또 다른 반복문을 포함하는 구조

	for(초기식; 조건식; 증감식){  		// 바깥 for문
		for(초기식; 조건식; 증감식){ 	// 안쪽 for문
			실행할 코드
		}				
	}
	
	바깥 for문(행)	바깥 for문이 1번 실행될 때
	안쪽 for문(열)	안쪽 for문은 조건식이 false가 될 때까지 실행된다
	

2. 기타 제어문
	반복문에서 사용한다.
	단, break는 switch에서도 사용한다

  1) break문
	즉시 해당 중괄호 영역을 탈출한다
	아래 코드를 실행시키지 않는다

  2) continue문
	즉시 다음 반복으로 넘어간다
	아래 코드를 실행시키지 않는다.
	

------------------------------------------------------------------------------------------
각 팀에서 2문제씩 최대 4문제
	5분 내외



2. 평균 성적, 평균 학점 계산
  사용자로부터 4과목의 점수를 각각 입력받고 주어진 표에 맞게 계산하여 평균 학점과 평균 성적을 계산하시오
  <표>
    점수   ㅣ  등급  ㅣ    학점
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
   95-100 ㅣ   A+  ㅣ   (4.5)
   90-94  ㅣ   A   ㅣ   (4.0)
   85-89  ㅣ   B+  ㅣ   (3.5)
   80-84  ㅣ   B   ㅣ   (3)
   75-79  ㅣ   C+  ㅣ   (2.5)
   75이하  ㅣ   F   ㅣ    (0)
[출력 예시]
4과목의 성적을 입력해 주세요 : 
90 89 98 78
평균 학점 : 3.6
평균 성적 : B+

공백(0100)                                                           
문제 1. 사용자가 입력한 숫자까지 구구단을 출력하는 프로그램
   구구단은 1단부터 9단까지다.
   사용자가 4를 입력할 경우 1단부터 4단까지 아래와 같은 형식으로 출력한다. 단은 \t로 구분한다.
   (이중 for 문 사용, if 사용 X)

[입출력예시]
구구단을 어디까지 출력할까요? : 4
1 * 1 = 1   2 * 1 = 2   3 * 1 = 3   4 * 1 = 4   
1 * 2 = 2   2 * 2 = 4   3 * 2 = 6   4 * 2 = 8   
1 * 3 = 3   2 * 3 = 6   3 * 3 = 9   4 * 3 = 12   
1 * 4 = 4   2 * 4 = 8   3 * 4 = 12   4 * 4 = 16   
1 * 5 = 5   2 * 5 = 10   3 * 5 = 15   4 * 5 = 20   
1 * 6 = 6   2 * 6 = 12   3 * 6 = 18   4 * 6 = 24   
1 * 7 = 7   2 * 7 = 14   3 * 7 = 21   4 * 7 = 28   
1 * 8 = 8   2 * 8 = 16   3 * 8 = 24   4 * 8 = 32   
1 * 9 = 9   2 * 9 = 18   3 * 9 = 27   4 * 9 = 36

문제 2. UP&DOWN 게임
   게임의 정답은 정해놓는다.
   사용자에게 1 ~ 50까지의 정수를 입력 받고, 입력 받은 값이 정답보다 크면 "DOWN!"을 출력한다
   정답보다 작으면 "UP"을 출력한다.
   정답이 아닐 경우 "값을 다시 입력해 주세요 : " 를 출력한 후, 값을 다시 입력 받는다.
   정답을 맞히면 "정답입니다 *번 째에 맞혔습니다!"를 출력하고 프로그램을 종료한다.
   단, 1 ~ 50까지의 정수 범위를 벗어나면 "1 ~ 50까지의 숫자만 입력해주세요 : " 를 출력한다.

---------------------------------------------------------------------------------
















































	




