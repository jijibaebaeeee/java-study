-----------------------------------------------------------------------------
12/17/화   DBMS 시험 => 12/16/월 수업한 내용으로만 DBMS 기초(16~20 DBMS 수업-20 JDBC)
12/24/화   WEB 시험  => 12/23/월 수업한 내용으로만 HTML 기초(23~31 WEB표준 수업-HTML, CSS, JS)
-----------------------------------------------------------------------------


day15					day16
내부클래스 -> 익명클래스 -> 람다식 -> 예외처리 (-> API -> 스트림 API or Object클래스)

1. 내부클래스(Inner Class 앱개발)
	클래스 내부에 선언된 클래스를 내부 클래스라고 한다
	내부클래스를 가진 클래스를 외부 클래스라고 한다
	클래스를 구성하는 멤버로 필드, 메소드, 생성자 + 클래스도 가질 수 있다.
	만약 B클래스를 A클래스에서만 사용한다면 B클래스를 내부클래스로 만들어서 사용한다
	외부클래스가 메모리에 할당되어야 내부 클래스의 객체화가 가능하기 때문에 B만 별로도 사용하지 못한다
	내부클래스는 외부크래스의 멤버이기 때문에 외부 크래스의 멤버를 상속 없이 사용할 수 있다.

  1) 내부 클래스를 사용하는 이유
	내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다 (외부클래스 값과 내부클래스의 값은 다름. 다른 객체이므로 출력해보면 다르다)
	코드의 복잡성을 줄일 수 있다.
	캡슐화 : 내부클래스는 외부클래스 내부에서만 사용가능하기 때문에 내부구현을 숨기고 캡슐화할 수 있다.
	코드 가독성, 유지 보수성
	+ 웹 개발 보다는 앱개발에서 더 많이 사용된다.(우리가 배우는 이유는 익명클래스를 이해하기 위함)

  2) 내부 클래스의 종류
	선언위치에 따른 분류 	선언위치		객체생성조건		 파일이름
	인스턴스 내부 클래스		class A{	A객체를 생성해야만		A$B.class
				  classB{}}	B객체를 생성할 수 있다	A : 외부클래스, B : 내부클래스

	정적 내부 클래스	   class A{		A객체를 생성하지 않아도
			   static class B{}}	B객체를 생성할 수 있다
	
	로컬 내부 클래스 	   class A{		method가 실행될 때만	A$1B
			   void method(){	B객체를 생성할 수 있다	A : 외부클래스, B : 내부클래스
				classB{}}


2. 익명클래스(Anonymous class) : 재사용 불가한 클래스
	이름이 없는 클래스이다
	미구현된 멤버를 구현하여 일회성으로 객체를 생성하기 위해 사용한다.
	인터페이스나 추상클래스를 구현할 때 유용하게 사용이 된다.
	익명클래스는 자식 클래스를 만들지 않고도 인터페이스나 추상클래스를 구현할 수 있기 때문에
	코드의 양을 줄일 수 있고, 일회성으로만 사용시에는 extends(상속)을 줄일 수 있다.
	익명클래스는 클래스 내부에서 선언하며, 객체를 생성할 때 바로 구현해주는 방식으로 사용된다.
	메인 메소드 안에서 작성된 내부 클래스의 종류는 로컬 내부 클래스이다.★

	※ 인터페이스는 항상 부모님이다
 		즉, 익명클래스는 자동으로 implements되어 부모 자식의 관계가 맺어진다.
		  ** 자식 클래스를 객체로 생성하여 부모타입의 변수에 저장되었으니 Up casting 된 것이다.
	※ 추상클래스도 동일하다


3. 람다식(lambda)
  1) 함수형 인터페이스(Functional Interface)
	단 하나의 추상 메소드를 가지고 있는 인터페이스
	@FunctionalInterface 어노테이션을 명시해주면 하나의 추상 메소드만 선언할 수 있도록 제한할 수 있다
	
  2) 람다식 : 익명 메소드
	자바8버전부터 사용가능하다
	메소드를 하나의 식으로 표현한다
	람다식을 매개변수로 전달가능하며, 반환도 가능하다
	함수형 인터페이스는 추상 메소드가 한개만 선언되기 때문에 람다식으로 재정의할 때 이름이 필요없다

  3) 람다식 문법
	매개변수 -> 바디
	만드는 법 -> lambda 패키지의 LambdaTest2클래스 참고
	